1、this指针
- this是对象的一个特殊的指针：Obj obj; this == & obj ;
    Obj obj(10) ==> Obj obj(this, 10)
    系统不会在多个对象错乱的情况，是为每个成员函数自动加了this指针；
- 对象生命周期[系统栈 分配空间]
    Coordinate init (1, 2)
    Coordinate init (3, 4)
    Line (1, 2) => (3, 4) INIT ...
    (1, 2) => (3, 4)
    =====================
    Coordinate init (11, 22)
    Coordinate init (33, 44)
    Line (11, 22) => (33, 44) INIT ...
    const (11, 22) => (33, 44)

    ~ Line (11, 22) => (33, 44) DELETE
    ~ Coordinate destory 33, 44
    ~ Coordinate destory 11, 22
    ~ Line (1, 2) => (3, 4) DELETE
    ~ Coordinate destory 3, 4
    ~ Coordinate destory 1, 2
- 对象的常指针、常引用二，note1.txt继
    //虚拟系统 this 首参的编译器工作：如果有内部函数、属性调用则自动进行[以区分位于不同对象]
    a.const修饰*[指向]&[引用]符号时：[变量的：名-址-值 >>值不变]
    CoordinateX coor(3,5);
    const CoordinateX & coor2 = coor; // &coor2锁定 => coor锁定，coor2的内容锁定、可以有多个coor2定义
    const CoordinateX * pCoor = & coor; // *pCoor锁定 => pCoor的地址不变、值可变，coor地址不可变、值可变
    cout << "& coor2: " << &coor2 << "; * pCoor: " << pCoor << endl;
    coor.info();
    coor.setX(33); //coor地址不可变、值可变
    cout << coor.getX() << endl;
    //coor2.getY(); // error: 将'const CoordinateX'作为'this'参数丢弃限定词
    //pCoor->getX(); // error: 同上
    //coor2，pCoor set更不可能
    CoordinateX coorP(22,33);
    pCoor = & coorP; //pCoor的地址不变、值可变

    b.const修饰变量时：[变量的：名-址-值 >>值不变]
    CoordinateX door(3,5);
    //CoordinateX & const door2 = door; // error: 'const'限定符不能应用于'CoordinateX&'，[coor2无内容不可锁定]
    CoordinateX * const pDoor = & door; // pCoor锁定 => pCoor指向[指针内容]不可变，coor1地址不可变、值可变
    coor.info();
    coor.setY(55);
    cout << door.getY() << endl;
    CoordinateX doorP(22,33);
    //pDoor = & doorP; //error: 分配只读变量“pDoor”，[pCoor指向||指针内容不可变]
    pDoor->setX(66);
    cout << door.getX() << endl; //pDoor -> door

